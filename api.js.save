var express = require('express');
var Sequelize = require('sequelize');
var app = express();
var fs = require('fs');
var request = require('request');
var cron = require('cron').CronJob;

var nodemailer = require('nodemailer');

// create reusable transporter object using the default SMTP transportvar transporter = nodemailer.createTransport('smtps://fikus88%40gmail.com:Exos1988@smtp.gmail.com/key=AIzaSyCSpWrWcJf8LzP84GwbChNJKpI4EUcMj4g');

// setup e-mail data with unicode symbols
var mailOptions = {
    from: '"Lukasz Sikorski" <fikus88@gmail.com>', // sender address
    to: 'fikus88@gmail.com, anna.hertel78@gmail.com', // list of receivers
    subject: 'Your serials have been updated', // Subject line
    text: 'Serial_tracker', // plaintext body
    html: '<b>Hello, Its Serial Tracker</b><div><p>Your serials have been updated</p></div>' // html body
};
function SendEmail() {
// send mail with defined transport object
    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: ' + info.response);
    });

}


new cron('*/10 * * * * *', function() {
   // GetAllIDs();
    console.log(new Date().toLocaleString() +' Cron job executed');
SendEmail();
}, null
, true);

var seq = new Sequelize(
    'serial_api',
    'postgres',
    'Exouskality1988', {
        host: 'localhost',
        dialect: 'postgres',
        pool: {
            max: 5,
            min: 0,
            idle: 10000
        }
    }
);


//SEARCH

app.get('/search=:query', function (req, res) {
    var query = req.params.query;
    var req_string = 'http://api.tvmaze.com/search/shows?q=' + query;
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {
            var obj = JSON.parse(body);
            //  res.send(body);

            var response_search = '';
            for (var i in obj) {

                var obj_str = JSON.stringify(obj[i].show);
                var obj_show = JSON.parse(obj_str);

                response_search += 'ID :' + obj_show.id + '<br>';
                response_search += 'Name :' + obj_show.name + '<br>';
                response_search += '<br>'

            }

            res.send(response_search);

        }
    })
});


// Save single serial in db  by id

app.get('/serial/:id', function (req, res) {
    var id = req.params.id;
    ID = id;
    var req_string = 'http://api.tvmaze.com/shows/' + id;
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {
            var obj = JSON.parse(body);

            if (obj.image != null) {
                var images_str = JSON.stringify(obj.image);
                var images = JSON.parse(images_str);

            }
            else {
                images.original = 'http://blogs.diabetes.org.uk/wp-content/themes/white/assets/images/placeholder.jpg';
            }
            obj.summary = obj.summary.split("'").join("");
            SaveSerial( "'" + obj.name.replace("'","") + "'","'" + images.original + "'","'" + obj.summary + "'", id );


        }
    });
});



// STORE SERIAL IN DB

function SaveSerial(title, poster, summary, api_id) {

    seq.query('SELECT fn_show_upsert(' + title + ',' + poster + ',' + summary + ',' + api_id + ')'
    ).then(function (projects) {
        return projects;
    })

}

function SaveEpisode(serial_id, ep_title,ep_poster,season,episode,ep_summary,air_time) {
    var query = 'SELECT fn_episodes_upsert(' + serial_id + ',' + ep_title + ',' + ep_poster + ',' + season +
        ',' + episode + ',' + ep_summary + ',' + air_time + ')';
    console.log(query);
    seq.query(query
    ).then(function (query) {


    })
}

// UPDATE ALL EPISODES FOR SERIALS
function GetAllIDs () {
    var query = "SELECT api_id from serials";
    seq.query(query,{ type : seq.QueryTypes.SELECT }).then(function (results) {
       // console.log(results);
var obj = JSON.parse(JSON.stringify(results));
//console.log(obj);
                for (var i in obj) {
                    //   console.log(obj[i].table_name);
                    GetAllEpisodes(obj[i].api_id)
                }
    })
}

//GET FULL LIST OF EPISODES FOR GIVEN ID AND STORE THEM IN DB
function GetAllEpisodes(id) {
    var req_string = 'http://api.tvmaze.com/shows/' + id + '/episodes';
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {

            var obj = JSON.parse(body);

            for (var i in obj) {

                if (obj[i].image != null) {
                    var images_str = JSON.stringify(obj[i].image);
                    var images = JSON.parse(images_str);

                }
                else {
                    images.original = 'http://blogs.diabetes.org.uk/wp-content/themes/white/assets/images/placeholder.jpg';
                }
                var dt = new Date(obj[i].airtime + " " + obj[i].airdate);
                dt = dt.toISOString();
                console.log(dt)
                obj[i].summary = obj[i].summary.split("'").join("");
                SaveEpisode(id,"'" + obj[i].name.replace("'","") + "'", "'" + images.original + "'",
                    obj[i].season, obj[i].number, "'" + obj[i].summary + "'", "'" +dt+ "'")

            }

        }
    })
}

    app.get('/eps/:id', function (req, res) {
        var id = req.params.id;
        GetAllEpisodes(id);
    });



var server = app.listen(8080, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log("API Runing at http://%s:%s", host, port)
});

