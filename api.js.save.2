var express = require('express');
var Sequelize = require('sequelize');
var app = express();
var fs = require('fs');
var request = require('request');
var cron_cont = require('cron').CronJob;
var cron_once = require('cron').CronJob;
var LogToFile = require('noogger');


var nodemailer = require('nodemailer');
var transport = require('nodemailer-smtp-transport');

// create reusable transporter object using the default SMTP transport
var transporter = nodemailer.createTransport(transport({
service : 'Gmail',
auth : {
user: 'fikus88@gmail.com',
pass: 'wudjqsmuznnrhuto'
}
}));

// setup e-mail data with unicode symbols



var Titles = [];
function SendEmail(type, Titles) {
var chosen_opts;
if (type=='Success') {

    chosen_opts = {
        from: '"Serial Tracker Admin" <fikus88@gmail.com>', // sender address
        to: 'fikus88@gmail.com', // list of receivers
        subject: 'Update Success', // Subject line
        html: '<b>Hello, Its Serial Tracker</b><div><p>Your serials have been updated</p></div><div><ul>'};
    for (var i in Titles) {
        chosen_opts.html += '<li>' + Titles[i] + '</li>'
    }
    chosen_opts.html += '</ul></div>'
}


else {

    chosen_opts = {
        from: '"Serial Tracker Admin" <fikus88@gmail.com>',
        to: 'fikus88@gmail.com',
        subject: 'Update Failed',
        html: '<h1 style="color : red">UPDATE FAILED</h1><div><ul>'};
        for (var i in Titles) {
        chosen_opts.html += '<li>' + Titles[i] + '</li>'
    }
    chosen_opts.html += '</ul></div>'

}

// send mail with defined transport object
    transporter.sendMail(chosen_opts, function (error, info) {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: ' + info.response);
    });

}


new cron_once('* * * * * *',function() {
GetAllIDs();
this.stop();
},null,true);

new cron_cont('00 00 */12 * * *', function() {

        GetAllIDs();
    Titles = [];
    }
, null
, true);

var seq = new Sequelize(
    'serial_api',
    'postgres',
    'Exouskality1988', {
        host: 'localhost',
        dialect: 'postgres',
        pool: {
            max: 5,
            min: 0,
            idle: 10000
        }
    }
);


//Check Status

app.get('/serial-api',function(req, res) {
res.send('<h1 style="color:red;">API CONNECTED</h1>');
});

//SEARCH

app.get('/serial-api/search=:query', function (req, res) {
    var query = req.params.query;
    var req_string = 'http://api.tvmaze.com/search/shows?q=' + query;
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {
            var obj = JSON.parse(body);
            //  res.send(body);

            var response_search = '';
            for (var i in obj) {

                var obj_str = JSON.stringify(obj[i].show);
                var obj_show = JSON.parse(obj_str);

                response_search += 'ID :' + obj_show.id + '<br>';
                response_search += 'Name :' + obj_show.name + '<br>';
                response_search += '<br>'

            }

            res.send(response_search);

        }
    })
});


// Save single serial in db  by id

app.get('/serial-api/serial/:id', function (req, res) {
    var id = req.params.id;
    ID = id;
    var req_string = 'http://api.tvmaze.com/shows/' + id;
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {
            var obj = JSON.parse(body);

            if (obj.image != null) {
                var images_str = JSON.stringify(obj.image);
                var images = JSON.parse(images_str);

            }
            else {
                images.original = 'http://blogs.diabetes.org.uk/wp-content/themes/white/assets/images/placeholder.jpg';
            };
            if (obj.summary != null ) {
            obj.summary = obj.summary.split("'").join("");
            };
            SaveSerial( "'" + obj.name.replace("'","") + "'","'" + images.original + "'","'" + obj.summary + "'", id );
		res.send("Serial " + obj.name + " succesfully added to database."); 

        }
    });
});



// STORE SERIAL IN DB

function SaveSerial(title, poster, summary, api_id) {

    seq.query('SELECT fn_show_upsert(' + title + ',' + poster + ',' + summary + ',' + api_id + ')'
    ).then(function (projects) {
        return projects;
    })

}

function SaveEpisode(serial_id, ep_title,ep_poster,season,episode,ep_summary,air_time) {
    var query = 'SELECT fn_episodes_upsert(' + serial_id + ',' + ep_title + ',' + ep_poster + ',' + season +
        ',' + episode + ',' + ep_summary + ',' + air_time + ')';
    seq.query(query
    ).then(function (query) {


    })
}

// UPDATE ALL EPISODES FOR SERIALS

function GetAllIDs () {

    var query = "SELECT api_id, title from serials";
    seq.query(query,{ type : seq.QueryTypes.SELECT }).then(function(results) {
       // console.log(results);
var obj = JSON.parse(JSON.stringify(results));
//console.log(obj);
                for (var i in obj) {
try {
                 GetAllEpisodes(obj[i].api_id,obj[i].title); // UNCOMMENT UPDATE PROCESS
		 }
 catch (ex) {
console.log(ex);
brea

    });
    if (Titles.length > 0) {
        SendEmail("Success", Titles);
    }
    else {
        SendEmail("Fail", Titles);
    }

}

//GET FULL LIST OF EPISODES FOR GIVEN ID AND STORE THEM IN DB
function GetAllEpisodes(id, title) {
    Titles.push(title);

    var req_string = 'http://api.tvmaze.com/shows/' + id + '/episodes';
    request(req_string, function (error, response, body) {
        if (!error && response.statusCode == 200) {

            var obj = JSON.parse(body);
            for (var i in obj) {

                if (obj[i].image != null) {
                    var images_str = JSON.stringify(obj[i].image);
                    var images = JSON.parse(images_str);

                }
                else {
                    images = {original : 'http://blogs.diabetes.org.uk/wp-content/themes/white/assets/images/placeholder.jpg'};

                }
		var dt = "";
		if (obj[i].airate != "") {
					 dt = obj[i].airdate + " " + obj[i].airtime + ":00";

			}else {
				dt = "";}
		//var dt = new Date(dtt.split("-").reverse().join("-")).getTime();

                 if (obj[i].summary != null && dt != '' ) {
                obj[i].summary = obj[i].summary.split("'").join("");
	
                SaveEpisode(id,"'" + obj[i].name.replace("'","") + "'", "'" + images.original + "'",
                    obj[i].season, obj[i].number, "'" + obj[i].summary + "'", "'" + dt + "'")
		};
            }

        }
    })

}

    app.get('/serial-api/eps/:id', function (req, res) {
        var id = req.params.id;
        GetAllEpisodes(id);
	res.send('Episodes added');
    });



var server = app.listen(8080, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log("API Runing at http://%s:%s", host, port)
});

